volumes:
  postgresql-data: {}
  minio-data: {}
  keycloak-data: {}

networks:
  backend-ecos:
    name: backend-ecos
    driver: bridge

services:
  postgresql-ecos:
    container_name: ecos-db
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    networks:
      - backend-ecos
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
  postgresql-keycloak:
    container_name: keycloak-db
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    networks:
      - backend-ecos
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${PG_KEYCLOAK_PASSWORD}
      POSTGRES_DB: ${PG_KEYCLOAK_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    depends_on:
      postgresql-keycloak:
        condition: service_healthy
    ports:
      - "8180:8080"
    networks:
      - backend-ecos
    volumes:
      - ./keycloak:/opt/keycloak/data/import:ro
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: jdbc:postgresql://postgresql-keycloak:${PG_KEYCLOAK_DB_PORT}/${PG_KEYCLOAK_DB}
      KC_DB_USERNAME: ${PG_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${PG_KEYCLOAK_PASSWORD}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA}
      KEYCLOAK_ADMIN: ${KC_ROOT_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ROOT_PASSWORD}
    command:
      - start
      - --proxy=edge
      - --hostname-strict=false
      - --hostname-strict-https=false
      - --health-enabled=true
      - --http-relative-path=/auth
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /auth/health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    