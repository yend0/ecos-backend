volumes:
  postgresql-data: {}
  minio-data: {}
  keycloak-data: {}

networks:
  backend-ecos:
    name: backend-ecos
    driver: bridge

services:
  postgresql-ecos:
    container_name: ecos-db
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    networks:
      - backend-ecos
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
  ecos-app:
    container_name: ecos-app
    image: ghcr.io/yend0/ecos-backend:latest
    depends_on:
      postgresql-ecos:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - backend-ecos
    environment:
      API_VERSION: ${API_VERSION}
      DATABASE_PORT: ${DATABASE_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_ADDRESS: ${POSTGRES_ADDRESS}
      HOST: ${HOST}
      PORT: ${PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      RELOAD: ${RELOAD}
      FACTORY: ${FACTORY}
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_ADMIN_NAME: ${KEYCLOAK_ADMIN_NAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_ADMIN_REALM: ${KEYCLOAK_ADMIN_REALM}
      BUCKET_NAME: ${BUCKET_NAME}
      ENDPOINT: ${ENDPOINT}
      ACCESS_KEY: ${ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
      ECHO: ${ECHO}
  postgresql-keycloak:
    container_name: keycloak-db
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    networks:
      - backend-ecos
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${PG_KEYCLOAK_PASSWORD}
      POSTGRES_DB: ${PG_KEYCLOAK_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    depends_on:
      postgresql-keycloak:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - backend-ecos
    volumes:
      - ./keycloak:/opt/keycloak/data/import:ro
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: jdbc:postgresql://postgresql-keycloak:${PG_KEYCLOAK_DB_PORT}/${PG_KEYCLOAK_DB}
      KC_DB_USERNAME: ${PG_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${PG_KEYCLOAK_PASSWORD}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA}
      KEYCLOAK_ADMIN: ${KC_ROOT_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ROOT_PASSWORD}
    command:
      - start
      - --proxy=edge
      - --hostname-strict=false
      - --hostname-strict-https=false
      - --health-enabled=true
      - --http-relative-path=/auth
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /auth/health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 30s
      timeout: 10s
      retries: 3
  alembic-migrations:
    container_name: alembic-migrations
    image: alembic-migrations:latest
    depends_on:
      postgresql-ecos:
        condition: service_healthy
    networks:
      - backend-ecos
    volumes:
      - ../migrations:/migrations
      - ../../src/ecos_backend:/ecos_backend
    environment:
        DATABASE_PORT: ${DATABASE_PORT}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_ADDRESS: ${POSTGRES_ADDRESS}
        BUCKET_NAME: ${BUCKET_NAME}
        ENDPOINT: ${ENDPOINT}
        ACCESS_KEY: ${ACCESS_KEY}
        SECRET_KEY: ${SECRET_KEY}
    command: ["upgrade", "head"]
  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - backend-ecos
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ADDRESS: ${MINIO_ADDRESS}
      MINIO_CONSOLE_ADDRESS: ${MINIO_CONSOLE_ADDRESS}
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 20s