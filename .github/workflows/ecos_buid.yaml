name: "Ecos Build"

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/ecos_build.yml'
      - 'VERSION'
      - 'etc/infra/docker-compose.yml'
      - 'Dockerfile'
      - 'etc/Dockerfile.migrations'
      - 'src/ecos_backend/**'  
      - 'etc/migrations/**'        
      - 'etc/alembic.ini'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY_TOKEN: ${{ secrets.DOCKER_CONTAINER_REGISTRY_TOKEN }}
  SERVER_IP: ${{ vars.SERVER_IP }}
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
  SSH_USER: ${{ vars.SSH_USERNAME }}

jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    name: Build Docker Image
    outputs:
      image_tag: ${{ steps.get_version.outputs.VERSION }}
    permissions:
        actions: write       # Necessary to cancel workflow executions
        checks: write        # Necessary to write reports
        pull-requests: write # Necessary to comment on PRs
        contents: read
        packages: write
    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
    
      - name: Create Docker Buildx builder
        run: docker buildx create --name my_builder --driver docker-container --bootstrap --use
    
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.REGISTRY_TOKEN }}
          
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
    
      - name: Read version from VERSION file
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
    
      - name: Build and push main application image
        run: |
          docker buildx build \
            --file Dockerfile \
            --cache-from type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache \
            --cache-to type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max \
            --pull \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --push \
            .

      - name: Build and push alembic migrations image
        run: |
          docker buildx build \
              --file etc/Dockerfile.migrations \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-migrations:latest \
              --push \
              .
      
      - name: Upload deployment bundle
        uses: actions/upload-artifact@v4
        with:
          name: deployment-bundle
          path: |
            etc/infra/docker-compose.yml
            src/
            etc/migrations/
          retention-days: 1

      - name: Cleanup Docker
        run: docker buildx rm my_builder

  deploy:
    runs-on: ubuntu-latest
    name: Deploy on Production
    needs: build_docker_image
    steps:
      - name: Download deployment bundle
        uses: actions/download-artifact@v4
        with:
          name: deployment-bundle
          path: deployment-bundle
    # ==================== SSH Setup ====================
      - name: Install SSH client
        run: sudo apt update && sudo apt install -y openssh-client

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Configure SSH agent
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
    # ==================== Deployment ====================
      - name: Upload files to server
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "mkdir -p ~/ecos-deploy"
          echo "${{ vars.COMPOSE_ENV_FILE }}" > .env.tmp
          scp .env.tmp ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:~/ecos-deploy/.env
          ssh $SSH_USER@$SERVER_IP "
            set -a
            source ~/ecos-deploy/.env
            set +a
          "
          rm .env.tmp

          scp deployment-bundle/etc/infra/docker-compose.yml ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:~/ecos-deploy/
    # ==================== Docker Operations ====================
      - name: Pull images and restart containers
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "
            cd ~/ecos-deploy
            echo '==> Pulling latest images...'
            docker compose pull
            echo '==> Stopping old containers...'
            docker compose down --remove-orphans
            echo '==> Starting new containers...'
            docker compose up -d
            echo '==> Cleaning up...'
            docker system prune -f
          "